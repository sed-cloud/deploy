name: 'deploy'
description: 'deploys a python repo to my droplet running pm2 (discount google cloud)'
inputs:
  repo-owner:
    description: 'owner of the repo being deployed (must be within the organization "sed-cloud")'
    required: true
  repo-name: 
    description: 'name of the repo being deployed'
    required: true
  repo-type:
    description: 'the type of repo being deployed'
    required: true
  
  SED_CLOUD_HOST: 
    description: 'cloud host secret from org (github actions hates me)'
    required: true
  SED_CLOUD_USER: 
    description: 'cloud user secret from org (github actions hates me)'
    required: true
  SSH_PRIVATE_KEY: 
    description: 'ssh private key secret from org (github actions hates me)'
    required: true
  SSH_KNOWN_HOSTS: 
    description: 'ssh known hosts secret from org (github actions hates me)'
    required: true
  SECRETS: 
    description: 'All secrets from the calling repository'
    required: true
    
    
runs:
  using: "composite"
  steps:
    - name: Validate Repo
      run: |
        [[ ${{ inputs.repo-owner }} -eq "sed-cloud" ]] || { echo >&2 "Cannot deploy projects from outside this organization"; exit 1; }
      shell: bash 
    
    - name: Sync Repo
      run: |
        git clone https://github.com/${{ inputs.repo-owner }}/${{ inputs.repo-name }}.git source
        cd source
      shell: bash 
  
    - name: Setup SSH
      shell: bash 
      env:
        SED_CLOUD_HOST: ${{ inputs.SED_CLOUD_HOST }}
        SED_CLOUD_USER: ${{ inputs.SED_CLOUD_USER }}
        SSH_PRIVATE_KEY: ${{ inputs.SSH_PRIVATE_KEY }}
        SSH_KNOWN_HOSTS: ${{ inputs.SSH_KNOWN_HOSTS }}
      run: | 
        mkdir -p ~/.ssh/
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy.key
        sudo chmod 600 ~/.ssh/deploy.key
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        
        cat >>~/.ssh/config <<END
        Host deploy
          HostName ${{ inputs.SED_CLOUD_HOST }}
          User ${{ inputs.SED_CLOUD_USER }}
          IdentityFile ~/.ssh/deploy.key
          StrictHostKeyChecking no
        END
        
    - name: Create env file
      run: |
        touch source/.env
        
        # handle builtin env variables
        # echo SED_CLOUD_HOST=${{ inputs.SED_CLOUD_HOST }} >> source/.env
        # echo SED_CLOUD_USER=${{ inputs.SED_CLOUD_USER }} >> source/.env
        # echo REPO_OWNER=${{ inputs.repo-owner }} >> source/.env
        # echo REPO_NAME=${{ inputs.repo-name }} >> source/.env
        for item in `echo '${{ inputs.SECRETS }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"'` ; do echo $item >> source/.env ; done
        
        cat source/.env
        
      shell: bash 
      
    - name: Copy Source
      shell: bash
      run: |
        chmod -R 777 source
        rsync -a source/ deploy:/home/${{ inputs.SED_CLOUD_USER }}/${{ inputs.repo-name }}/
        
    - name: Deploy DB
      shell: bash
      if: ${{ contains(inputs.repo-type, 'DB') }} 
      run: |
        ssh deploy " cd /home/${{ inputs.SED_CLOUD_USER }}/${{ inputs.repo-name }} ; docker-compose down ; docker-compose --env-file .env up -d ; docker-compose run --rm ${{ inputs.repo-name }}-service /bin/bash -c 'alembic revision -m baseline && alembic upgrade head && alembic revision --autogenerate -m db-update && alembic upgrade head'"
      
    - name: Deploy Service
      shell: bash
      if: ${{ contains(inputs.repo-type, 'SERVICE') }} 
      run: |
        ssh deploy " cd /home/${{ inputs.SED_CLOUD_USER }}/${{ inputs.repo-name }} ; docker-compose down ; docker-compose --env-file .env up -d ; "
      
    - name: Deploy Website
      shell: bash
      if: ${{ contains(inputs.repo-type, 'WEB') }} 
      run: |
        ssh deploy " cd /home/${{ inputs.SED_CLOUD_USER }}/${{ inputs.repo-name }} ; docker stop ${{ inputs.repo-name }} ; docker rm ${{ inputs.repo-name }} ; docker build -t nextjs-docker . ; docker run --name ${{ inputs.repo-name }} -d -p 3000:3000 --env-file .env nextjs-docker"
